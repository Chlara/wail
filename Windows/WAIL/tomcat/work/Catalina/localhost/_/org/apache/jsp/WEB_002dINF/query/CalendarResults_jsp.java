/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.30
 * Generated at: 2013-02-12 14:42:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.query;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.text.ParseException;
import org.archive.wayback.WaybackConstants;
import org.archive.wayback.core.CaptureSearchResult;
import org.archive.wayback.core.CaptureSearchResults;
import org.archive.wayback.core.UIResults;
import org.archive.wayback.core.WaybackRequest;
import org.archive.wayback.partition.CaptureSearchResultPartitionMap;
import org.archive.wayback.util.partition.Partition;
import org.archive.wayback.util.partition.Partitioner;
import org.archive.wayback.util.partition.PartitionSize;
import org.archive.wayback.util.StringFormatter;

public final class CalendarResults_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/template/UI-header.jsp", out, true);
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/template/CookieJS.jsp", out, true);


UIResults results = UIResults.extractCaptureQuery(request);

WaybackRequest wbRequest = results.getWbRequest();
CaptureSearchResults cResults = results.getCaptureResults();
StringFormatter fmt = wbRequest.getFormatter();
String searchString = fmt.escapeHtml(wbRequest.getRequestUrl());
List<String> closeMatches = cResults.getCloseMatches();

String staticPrefix = results.getStaticPrefix();
String queryPrefix = results.getQueryPrefix();
String replayPrefix = results.getReplayPrefix();

Date searchStartDate = wbRequest.getStartDate();
Date searchEndDate = wbRequest.getEndDate();
long firstResult = cResults.getFirstReturned();
long lastResult = cResults.getReturnedCount() + firstResult;
long resultCount = cResults.getMatchingCount();

CaptureSearchResultPartitionMap map = 
	new CaptureSearchResultPartitionMap();
Partitioner<CaptureSearchResult> partitioner = 
	new Partitioner<CaptureSearchResult>(map);
PartitionSize size = partitioner.getSize(searchStartDate,searchEndDate,13);
List<Partition<CaptureSearchResult>> partitions = 
	partitioner.getRange(size,searchStartDate,searchEndDate);

Iterator<CaptureSearchResult> it = cResults.iterator();
partitioner.populate(partitions,it);
int numPartitions = partitions.size();

      out.write("\n");
      out.write("<table border=\"0\" cellpadding=\"5\" width=\"100%\" class=\"mainSearchBanner\" cellspacing=\"0\">\n");
      out.write("   <tr>\n");
      out.write("      <td>\n");
      out.write("            ");
      out.print( fmt.format("PathQueryClassic.searchedFor",searchString) );
      out.write("\n");
      out.write("      </td>\n");
      out.write("      <td align=\"right\">\n");
      out.write("            Set Anchor Window:\n");
      out.write("            ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/template/AnchorWindow.jsp", out, true);
      out.write("\n");
      out.write("            ");
      out.print( fmt.format("PathQueryClassic.resultsSummary",resultCount) );
      out.write("\n");
      out.write("      </td>\n");
      out.write("   </tr>\n");
      out.write("</table>\n");
      out.write("<br>\n");
      out.write("\n");
      out.write("\n");
      out.write("<table border=\"0\" width=\"100%\">\n");
      out.write("   <tr bgcolor=\"#CCCCCC\">\n");
      out.write("      <td colspan=\"");
      out.print( numPartitions );
      out.write("\" align=\"center\" class=\"mainCalendar\">\n");
      out.write("         ");
      out.print( fmt.format("PathQueryClassic.searchResults",searchStartDate,searchEndDate) );
      out.write("\n");
      out.write("      </td>\n");
      out.write("   </tr>\n");
      out.write("\n");
      out.write("<!--    RESULT COLUMN HEADERS -->\n");
      out.write("   <tr bgcolor=\"#CCCCCC\">\n");

  for(int i = 0; i < numPartitions; i++) {
	  Partition<CaptureSearchResult> partition = partitions.get(i);

      out.write("\n");
      out.write("      <td align=\"center\" class=\"mainBigBody\">\n");
      out.write("         ");
      out.print( fmt.format("PartitionSize.dateHeader."+size.name(),partition.getStart(), partition.getEnd()) );
      out.write("\n");
      out.write("      </td>\n");

  }

      out.write("\n");
      out.write("   </tr>\n");
      out.write("<!--    /RESULT COLUMN HEADERS -->\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!--    RESULT COLUMN COUNTS -->\n");
      out.write("   <tr bgcolor=\"#CCCCCC\">\n");

  for(int i = 0; i < numPartitions; i++) {
	  Partition<CaptureSearchResult> partition = partitions.get(i);

      out.write("\n");
      out.write("      <td align=\"center\" class=\"mainBigBody\">\n");
      out.write("         ");
      out.print( fmt.format("Partition.columnSummary",partition.count()) );
      out.write("\n");
      out.write("      </td>\n");

  }

      out.write("\n");
      out.write("   </tr>\n");
      out.write("<!--    /RESULT COLUMN COUNTS -->\n");
      out.write("\n");
      out.write("\n");
      out.write("<!--    RESULT COLUMN DATA -->\n");
      out.write("   <tr bgcolor=\"#EBEBEB\">\n");

  boolean first = false;
  String lastMD5 = null;

  for(int i = 0; i < numPartitions; i++) {
	  Partition<CaptureSearchResult> partition = partitions.get(i);
	  List<CaptureSearchResult> partitionResults = partition.list();

      out.write("\n");
      out.write("      <td nowrap class=\"mainBody\" valign=\"top\">\n");

    if(partitionResults.size() == 0) {

      out.write("\n");
      out.write("         &nbsp;\n");

    } else {

      for(int j = 0; j < partitionResults.size(); j++) {
      
        CaptureSearchResult result = partitionResults.get(j);
      String url = result.getUrlKey();
      String captureTimestamp = result.getCaptureTimestamp();
      Date captureDate = result.getCaptureDate();
      String prettyDate = fmt.format("PathQuery.classicResultLinkText",
        captureDate);
      String origHost = result.getOriginalHost();
      String MD5 = result.getDigest();
      String redirectFlag = (0 == result.getRedirectUrl().compareTo("-")) 
        ? "" : fmt.format("PathPrefixQuery.redirectIndicator");
      String httpResponse = result.getHttpCode();
      String mimeType = result.getMimeType();
    
      String arcFile = result.getFile();
      String arcOffset = String.valueOf(result.getOffset());
    
      String replayUrl = fmt.escapeHtml(results.resultToReplayUrl(result));
    
      boolean updated = false;
      if(lastMD5 == null) {
        lastMD5 = MD5;
        updated = true;
      } else if(0 != lastMD5.compareTo(MD5)) {
        updated = true;
        lastMD5 = MD5;
      }
      String updateStar = updated ? "*" : "";

      out.write("\n");
      out.write("         <a onclick=\"SetAnchorDate('");
      out.print( captureTimestamp );
      out.write("');\" href=\"");
      out.print( replayUrl );
      out.write('"');
      out.write('>');
      out.print( prettyDate );
      out.write("</a> ");
      out.print( updateStar );
      out.write("<br></br>\n");

      
      }
    
    }

      out.write("\n");
      out.write("      </td>\n");

  }
  

      out.write("\n");
      out.write("   </tr>\n");
      out.write("<!--    /RESULT COLUMN DATA -->\n");
      out.write("</table>\n");
      out.write("\n");
      out.write("\n");

if(closeMatches != null && !closeMatches.isEmpty()) {
	WaybackRequest tmp = wbRequest.clone();
	
	
	
      out.write("\n");
      out.write("\tClose Matches:<br>\n");
      out.write("\t");

	for(String closeMatch : closeMatches) {
		tmp.setRequestUrl(closeMatch);
		String link = fmt.escapeHtml(tmp.getAccessPoint().getQueryPrefix() + 
				"query?" + tmp.getQueryArguments());
		closeMatch = fmt.escapeHtml(closeMatch);
		
      out.write("\n");
      out.write("\t\t<a href=\"");
      out.print( link );
      out.write('"');
      out.write('>');
      out.print( closeMatch );
      out.write("</a><br>\n");
      out.write("\t\t");

	}
}
// show page indicators:
if(cResults.getNumPages() > 1) {
  int curPage = cResults.getCurPageNum();
  
      out.write("\n");
      out.write("  <hr></hr>\n");
      out.write("  ");

  for(int i = 1; i <= cResults.getNumPages(); i++) {
    if(i == curPage) {
      
      out.write("\n");
      out.write("      <b>");
      out.print( i );
      out.write("</b>\n");
      out.write("      ");
    
    } else {
      
      out.write("\n");
      out.write("      <a href=\"");
      out.print( fmt.escapeHtml(results.urlForPage(i)) );
      out.write('"');
      out.write('>');
      out.print( i );
      out.write("</a>\n");
      out.write("      ");

    }
  }
}

      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/template/UI-footer.jsp", out, true);
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
