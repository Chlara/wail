/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.30
 * Generated at: 2013-02-12 14:13:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.exception;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.Date;
import java.util.Iterator;
import org.archive.wayback.exception.WaybackException;
import org.archive.wayback.ResultURIConverter;
import org.archive.wayback.exception.ResourceNotInArchiveException;
import org.archive.wayback.exception.ResourceNotAvailableException;
import org.archive.wayback.core.CaptureSearchResult;
import org.archive.wayback.core.CaptureSearchResults;
import org.archive.wayback.core.UIResults;
import org.archive.wayback.core.WaybackRequest;
import org.archive.wayback.util.StringFormatter;
import org.archive.wayback.util.url.UrlOperations;
import org.archive.wayback.partition.PartitionsToGraph;
import org.archive.wayback.util.partition.Partitioner;
import org.archive.wayback.util.partition.Partition;
import org.archive.wayback.util.partition.PartitionSize;
import org.archive.wayback.partition.PartitionPartitionMap;
import org.archive.wayback.exception.ResourceNotAvailableException;

public final class HTMLError_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

UIResults results = UIResults.extractException(request);
WaybackException e = results.getException();
WaybackRequest wbr = results.getWbRequest();
e.setupResponse(response);
String staticPrefix = wbr.getAccessPoint().getStaticPrefix();
String queryPrefix = wbr.getAccessPoint().getQueryPrefix();
String replayPrefix = wbr.getAccessPoint().getReplayPrefix();
String requestUrl = wbr.getRequestUrl();

StringFormatter fmt = results.getWbRequest().getFormatter();

      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/template/UI-header.jsp", out, true);
      out.write("\n");
      out.write("\n");
      out.write("        <div id=\"positionHome\">\n");
      out.write("            <section>\n");
      out.write("            <div id=\"error\">\n");
      out.write("\n");
      out.write("                <h2>");
      out.print( fmt.format(e.getTitleKey()) );
      out.write("</h2>\n");
      out.write("                <p>");
      out.print( fmt.format(e.getMessageKey(),e.getMessage()) );
      out.write("</p>\n");

if(e instanceof ResourceNotInArchiveException) {
	ResourceNotInArchiveException niae = (ResourceNotInArchiveException) e;
	List<String> closeMatches = niae.getCloseMatches();
	if(closeMatches != null && !closeMatches.isEmpty()) {

      out.write("\n");
      out.write("\t\t        <p>Other possible close matches to try:</p>\n");
      out.write("\t\t        <p>\n");

		WaybackRequest tmp = wbr.clone();
		for(String closeMatch : closeMatches) {
			tmp.setRequestUrl(closeMatch);
			String link = queryPrefix + "query?" +
				tmp.getQueryArguments();

      out.write("\n");
      out.write("\t\t\t    <a href=\"");
      out.print( link );
      out.write('"');
      out.write('>');
      out.print( closeMatch );
      out.write("</a><br/>\n");

		}
	}
	String parentUrl = UrlOperations.getUrlParentDir(requestUrl);
	if(parentUrl != null) {
		WaybackRequest tmp = wbr.clone();
		tmp.setRequestUrl(parentUrl);
		tmp.setUrlQueryRequest();
		String link = queryPrefix + "query?" +
			tmp.getQueryArguments();
		String escapedLink = fmt.escapeHtml(link);
		String escapedParentUrl = fmt.escapeHtml(parentUrl);
		
      out.write("\n");
      out.write("\t\t        </p>\n");
      out.write("\t\t        <p>More options:</p>\n");
      out.write("\t\t\t    <p>Try Searching all pages under <a href=\"");
      out.print( escapedLink );
      out.write('"');
      out.write('>');
      out.print( escapedParentUrl );
      out.write("</a></p>\n");
      out.write("\t\t");

	}
} else if(e instanceof ResourceNotAvailableException) {

      out.write("\n");
      out.write("\t<div class=\"wm-nav-link-div\">\n");
      out.write("\t");

	ResourceNotAvailableException rnae = (ResourceNotAvailableException) e;
	
	CaptureSearchResults cResults = rnae.getCaptureSearchResults();
	Iterator<CaptureSearchResult> itr = cResults.iterator();
	CaptureSearchResult prev = null;
	CaptureSearchResult next = null;
	while(itr.hasNext()) {
		CaptureSearchResult cur = itr.next();
		if(cur.isClosest()) {
			break;
		}
		prev = cur;
	}
	if(itr.hasNext()) {
		next = itr.next();
	}
	if((prev != null) || (next != null)) {
		String dateFormat = "{0,date,MMMM dd, yyyy HH:mm:ss}";
		ResultURIConverter conv = wbr.getAccessPoint().getUriConverter();
		
      out.write("\n");
      out.write("\t\t<div>Or try another close version:</div>\n");
      out.write("\t\t");

		if(prev != null) {
			String safePrevReplay = fmt.escapeHtml(conv.makeReplayURI(prev.getCaptureTimestamp(),prev.getOriginalUrl()));
			
      out.write("\n");
      out.write("\t\t\t<div>Previous:<a href=\"");
      out.print( safePrevReplay );
      out.write('"');
      out.write('>');
      out.print( fmt.format(dateFormat,prev.getCaptureDate()));
      out.write("</a></div>\n");
      out.write("\t\t\t");

		}
		if(next != null) {
			String safeNextReplay = fmt.escapeHtml(conv.makeReplayURI(next.getCaptureTimestamp(),next.getOriginalUrl()));
			
      out.write("\n");
      out.write("\t\t\t<div>Next:<a href=\"");
      out.print( safeNextReplay );
      out.write('"');
      out.write('>');
      out.print( fmt.format(dateFormat,next.getCaptureDate()));
      out.write("</a></div>\n");
      out.write("\t\t\t");

		}
	}
	
      out.write("\n");
      out.write("\t</div>\n");

}

      out.write("\n");
      out.write("\n");
      out.write("            </div>\n");
      out.write("            </section>\n");
      out.write("            <div id=\"errorBorder\"></div>\n");
      out.write("\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/template/UI-footer.jsp", out, true);
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
